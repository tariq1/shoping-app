package com.abc.service;


import static org.junit.Assert.*;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.Test;
import org.mockito.Mockito;

import com.abc.model.BillDetail;
import com.abc.model.CustomerDetail;
import com.abc.model.Product;
import com.abc.model.UserDetail;

public class PaymentTest {

	@Test
	public void testGetPayAmountWithAffilate() throws Exception {
		
		Payment payment=new Payment();
		PaymentHelper helper= new PaymentHelper();
		payment.setPaymentHelper(helper);
		double result=payment.getPayAmount(00012,11045,1112);
		assertEquals(905.00, result, 0.00);
		
		
	}
	
	@Test
	public void testGetPayAmountWithEmployee() throws Exception {
		
		Payment payment=new Payment();
		PaymentHelper helper= new PaymentHelper();
		payment.setPaymentHelper(helper);
		
		
		double result=payment.getPayAmount(00012,11046,1112);
		assertEquals(810.00, result, 0.00);
		
		
	}
	
	@Test
	public void testGetPayAmountWithNonEmpNonAffil() throws Exception {
		
		Payment payment=new Payment();
		PaymentHelper helper= new PaymentHelper();
		payment.setPaymentHelper(helper);
		
		double result=payment.getPayAmount(00012,11047,1112);
		assertEquals(950.00, result, 0.00);
		
		
	}
	
	@Test
	public void testGetPayAmountWithOldCust() throws Exception {
		Payment payment=new Payment();
	
		PaymentHelper paymentHelper=Mockito.mock(PaymentHelper.class);
		payment.setPaymentHelper(paymentHelper);
		
		
		Mockito.when(paymentHelper.getCustomerDetail(1112)).thenReturn(getCustomerData());
		Mockito.when(paymentHelper.getBillDetail(00012)).thenReturn(getProductBillData());
		Mockito.when(paymentHelper.getUserDetail(11045)).thenReturn(getUserDetailData());
	
		double result=payment.getPayAmount(00012,11045,1112);
		assertEquals(930.00, result, 0.00);
	}
	
	public BillDetail getProductBillData(){
		 
	    BillDetail billDetail=new BillDetail();
		billDetail.setBillId(00012);
		Product p1=new Product();
		p1.setProductCode("A1234");
		p1.setProductCost(500.00);
		p1.setProductName("ABC");
		p1.setProductType("Cloth");
		p1.setGrocery(false);
		Product p2=new Product();
		p2.setProductCode("B1234");
		p2.setProductCost(500.00);
		p2.setProductName("PQR");
		p2.setProductType("Vegatble");
		p2.setGrocery(false);
		List<Product> lstOfProduct=new ArrayList<Product>();
		lstOfProduct.add(p2);
		lstOfProduct.add(p1);
		billDetail.setLstOfProduct(lstOfProduct);
		return billDetail ;
	}
	
	public UserDetail getUserDetailData(){
		
		   UserDetail user=new UserDetail();
		   user.setId(11045);
		   user.setFirstName("Feraz");
		   user.setFirstName("Kamal");
		   user.setAffilate(false);
		   user.setEmployee(false);
		   return user;
	}
	
	public CustomerDetail getCustomerData() throws Exception{
		   DateFormat df = new SimpleDateFormat("mm/dd/yyyy");
		   CustomerDetail cust1=new CustomerDetail();
		   cust1.setCustId(1112);
		   cust1.setCustName("Khalid");
		   cust1.setStartDate(df.parse("10/10/2014"));
		   cust1.setMobileNumbr("+97880657654");
		   return cust1;
	}
	

}
